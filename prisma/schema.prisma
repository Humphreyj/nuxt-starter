// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String?   // Nullable for OAuth users
  name             String?
  displayName      String?
  avatarUrl        String?
  provider         String?   // Nullable for password-based users
  providerId       String?   @unique // Nullable for password-based users
  emailVerified    Boolean   @default(false)
  verificationToken String?
  comments         Comment[] // Relation to the Comment model
  likesGiven       Like[]    @relation("LikesGiven") // Likes the user has given
  likesReceived    Like[]    @relation("LikesReceived") // Likes the user has received
  gameRatings      GameRating[] // Game ratings given by this user
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Comment {
  id           String    @id @default(uuid())
  articleId    String
  articleTitle String?   // Title of the article being commented on
  articleSlug  String?
  articleImage String?
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userData     Json      @default("{}") // JSON field to store user data
  content      String
  edited       Boolean   @default(false)
  likes        Like[]    // Relation to the Like model for comment likes
  parentId     String?   // ID of the parent comment (null for top-level comments)
  parent       Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies      Comment[] @relation("CommentReplies") // Direct relation to child comments
  createdAt    DateTime  @default(now())
}

model Like {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation("LikesGiven", fields: [userId], references: [id], onDelete: Cascade) // User who gave the like
  displayName     String?
  commentId       String?   // Nullable for likes on comments
  comment         Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade) // Comment that received the like
  receiverId      String
  receiver        User      @relation("LikesReceived", fields: [receiverId], references: [id], onDelete: Cascade) // Relation to the receiving user
  createdAt       DateTime  @default(now())
}


model GameRating {
  id            String    @id @default(uuid())
  gameId        String
  title         String?
  userId        String    // ID of the user giving the rating
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRecommended Boolean
  review        UserReview? 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@unique([userId, gameId]) // Ensures a user can only rate a game once
}

model UserReview {
  id            String     @id @default(uuid())
  gameRatingId  String     @unique // One-to-one relation with GameRating
  gameRating    GameRating @relation(fields: [gameRatingId], references: [id], onDelete: Cascade)
  content       String     // The actual review text
  edited        Boolean    @default(false)
  hoursPlayed   Float?     // Optional info about hours played
  purchaseType  String?    // How the game was acquired (e.g., "Steam", "GamePass")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}